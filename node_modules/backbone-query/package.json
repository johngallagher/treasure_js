{
  "name": "backbone-query",
  "description": "Lightweight Query API for Backbone Collections",
  "version": "0.1.2",
  "author": {
    "name": "Dave Tonge",
    "email": "dave@simplecreativity.co.uk",
    "url": "https://github.com/davidgtonge"
  },
  "tags": [
    "backbone",
    "underscore",
    "mongo",
    "query"
  ],
  "main": "./js/backbone-query",
  "repository": {
    "type": "git",
    "url": "https://davidgtonge@github.com/davidgtonge/backbone_query.git"
  },
  "dependencies": {
    "backbone": ">=0.5.x",
    "underscore": ">=1.1.x"
  },
  "devDependencies": {
    "coffee-script": ">=1.x.x",
    "nodeunit": "0.6.x",
    "uglify-js": "1.2.2"
  },
  "scripts": {
    "test": "cake test"
  },
  "readme": "backbone-query\r\n===================\r\n\r\n[![Build Status](https://secure.travis-ci.org/davidgtonge/backbone_query.png)](http://travis-ci.org/davidgtonge/backbone_query)\r\n\r\nA lightweight (3KB minified) utility for Backbone projects, that works in the Browser and on the Server.\r\nAdds the ability to search for models with a Query API similar to\r\n[MongoDB](http://www.mongodb.org/display/DOCS/Advanced+Queries)\r\nPlease report any bugs, feature requests in the issue tracker.\r\nPull requests are welcome!\r\n\r\nUsage\r\n=====\r\n\r\n#### Client Side Installation:\r\nTo install, include the `js/backbone-query.min.js` file in your HTML page, after Backbone and it's dependencies.\r\nThen extend your collections from Backbone.QueryCollection rather than from Backbone.Collection.\r\n\r\n#### Server side (node.js) installation\r\nYou can install with NPM: `npm install backbone-query`\r\nThen simply require in your project: `QueryCollection = require(\"backbone-query\").QueryCollection`\r\n\r\n\r\nYour collections will now have two new methods: `query` and `where`. Both methods accept 2 arguments - \r\na query object and an options object. The `query` method returns an array of models, but the `where` method\r\nreturns a new collection and is therefore useful where you would like to chain multiple collection \r\nmethods / where queries. The following are some basic examples:\r\n\r\n```js\r\nMyCollection.query({ \r\n    featured:true, \r\n    likes: {$gt:10}\r\n});\r\n// Returns all models where the featured attribute is true and there are\r\n// more than 10 likes\r\n\r\nMyCollection.query(\r\n    {tags: { $any: [\"coffeescript\", \"backbone\", \"mvc\"]}},\r\n    {sortBy: \"likes\", order: \"desc\", limit:10, page:2, cache:true}\r\n);\r\n// Finds models that have either \"coffeescript\", \"backbone\", \"mvc\" in their \"tags\" attribute\r\n// Sorts these models by the \"likes\" attribute in descending order\r\n// Caches the results and returns only 10 models, starting from the 11th model (page 2)\r\n\r\nMyCollection.query({\r\n  // Models must match all these queries\r\n  $and:{\r\n    title: {$like: \"news\"}, // Title attribute contains the string \"news\"\r\n    likes: {$gt: 10}\r\n  }, // Likes attribute is greater than 10\r\n\r\n  // Models must match one of these queries\r\n  $or:{\r\n    featured: true, // Featured attribute is true\r\n    category:{$in:[\"code\",\"programming\",\"javascript\"]}\r\n  } \r\n  //Category attribute is either \"code\", \"programming\", or \"javascript\"\r\n});\r\n```\r\n\r\nOr if CoffeeScript is your thing (the source is written in CoffeeScript), try this:\r\n\r\n```coffeescript\r\nMyCollection.query\r\n  $and:\r\n    likes: $lt: 15\r\n  $or:\r\n    content: $like: \"news\"\r\n    featured: $exists: true\r\n  $not:\r\n    colors: $contains: \"yellow\"\r\n```\r\n\r\nAnother CoffeeScript example, this time using `where` rather than `query`\r\n\r\n```coffeescript\r\nquery = \r\n  $likes: $lt: 10\r\n  $downloads: $gt: 20\r\n  \r\nMyCollection.where(query).my_custom_collection_method()\r\n```\r\n\r\n\r\nQuery API\r\n===\r\n\r\n### $equal\r\nPerforms a strict equality test using `===`. If no operator is provided and the query value isn't a regex then `$equal` is assumed.\r\n\r\n```javascript\r\nMyCollection.query({ title:\"Test\" });\r\n// Returns all models which have a \"title\" attribute of \"Test\"\r\n\r\nMyCollection.query({ title: {$equal:\"Test\"} }); // Same as above\r\n```\r\n\r\n### $contains\r\nAssumes that the model property is an array and searches for the query value in the array\r\n\r\n```js\r\nMyCollection.query({ colors: {$contains: \"red\"} });\r\n// Returns models which contain the value \"red\" in a \"colors\" attribute that is an array.\r\n// e.g. a model with this attribute colors:[\"red\",\"yellow\",\"blue\"] would be returned\r\n```\r\n\r\n### $ne\r\n\"Not equal\", the opposite of $equal, returns all models which don't have the query value\r\n\r\n```js\r\nMyCollection.query({ title: {$ne:\"Test\"} });\r\n// Returns all models which don't have a \"title\" attribute of \"Test\"\r\n```\r\n\r\n### $lt, $lte, $gt, $gte\r\nThese conditional operators can be used for greater than and less than comparisons in queries\r\n\r\n```js\r\nMyCollection.query({ likes: {$lt:10} });\r\n// Returns all models which have a \"likes\" attribute of less than 10\r\nMyCollection.query({ likes: {$lte:10} });\r\n// Returns all models which have a \"likes\" attribute of less than or equal to 10\r\nMyCollection.query({ likes: {$gt:10} });\r\n// Returns all models which have a \"likes\" attribute of greater than 10\r\nMyCollection.query({ likes: {$gte:10} });\r\n// Returns all models which have a \"likes\" attribute of greater than or equal to 10\r\n```\r\n\r\n### $between\r\nTo check if a value is in-between 2 query values use the $between operator and supply an array with the min and max value\r\n\r\n```js\r\nMyCollection.query({ likes: {$between:[5,15} });\r\n// Returns all models which have a \"likes\" attribute of greater than 5 and less then 15\r\n```\r\n\r\n### $in\r\nAn array of possible values can be supplied using $in, a model will be returned if any of the supplied values is matched\r\n\r\n```js\r\nMyCollection.query({ title: {$in:[\"About\", \"Home\", \"Contact\"] } });\r\n// Returns all models which have a title attribute of either \"About\", \"Home\", or \"Contact\"\r\n```\r\n\r\n### $nin\r\n\"Not in\", the opposite of $in. A model will be returned if none of the supplied values is matched\r\n\r\n```js\r\nMyCollection.query({ title: {$nin:[\"About\", \"Home\", \"Contact\"] } });\r\n// Returns all models which don't have a title attribute of either\r\n// \"About\", \"Home\", or \"Contact\"\r\n```\r\n\r\n### $all\r\nAssumes the model property is an array and only returns models where all supplied values are matched.\r\n\r\n```js\r\nMyCollection.query({ colors: {$all:[\"red\", \"yellow\"] } });\r\n// Returns all models which have \"red\" and \"yellow\" in their colors attribute.\r\n// A model with the attribute colors:[\"red\",\"yellow\",\"blue\"] would be returned\r\n// But a model with the attribute colors:[\"red\",\"blue\"] would not be returned\r\n```\r\n\r\n### $any\r\nAssumes the model property is an array and returns models where any of the supplied values are matched.\r\n\r\n```js\r\nMyCollection.query({ colors: {$any:[\"red\", \"yellow\"] } });\r\n// Returns models which have either \"red\" or \"yellow\" in their colors attribute.\r\n```\r\n\r\n### $size\r\nAssumes the model property has a length (i.e. is either an array or a string).\r\nOnly returns models the model property's length matches the supplied values\r\n\r\n```js\r\nMyCollection.query({ colors: {$size:2 } });\r\n// Returns all models which 2 values in the colors attribute\r\n```\r\n\r\n### $exists or $has\r\nChecks for the existence of an attribute. Can be supplied either true or false.\r\n\r\n```js\r\nMyCollection.query({ title: {$exists: true } });\r\n// Returns all models which have a \"title\" attribute\r\nMyCollection.query({ title: {$has: false } });\r\n// Returns all models which don't have a \"title\" attribute\r\n```\r\n\r\n### $like\r\nAssumes the model attribute is a string and checks if the supplied query value is a substring of the property.\r\nUses indexOf rather than regex for performance reasons\r\n\r\n```js\r\nMyCollection.query({ title: {$like: \"Test\" } });\r\n//Returns all models which have a \"title\" attribute that\r\n//contains the string \"Test\", e.g. \"Testing\", \"Tests\", \"Test\", etc.\r\n```\r\n\r\n### $likeI\r\nThe same as above but performs a case insensitive search using indexOf and toLowerCase (still faster than Regex)\r\n\r\n```js\r\nMyCollection.query({ title: {$likeI: \"Test\" } });\r\n//Returns all models which have a \"title\" attribute that\r\n//contains the string \"Test\", \"test\", \"tEst\",\"tesT\", etc.\r\n```\r\n\r\n### $regex\r\nChecks if the model attribute matches the supplied regular expression. The regex query can be supplied without the `$regex` keyword\r\n\r\n```js\r\nMyCollection.query({ content: {$regex: /coffeescript/gi } });\r\n// Checks for a regex match in the content attribute\r\nMyCollection.query({ content: /coffeescript/gi });\r\n// Same as above\r\n```\r\n\r\n### $cb\r\nA callback function can be supplied as a test. The callback will receive the attribute and should return either true or false.\r\n`this` will be set to the current model, this can help with tests against computed properties\r\n\r\n```js\r\nMyCollection.query({ title: {$cb: function(attr){ return attr.charAt(0) === \"c\";}} });\r\n// Returns all models that have a title attribute that starts with \"c\"\r\n\r\nMyCollection.query({ computed_test: {$cb: function(){ return this.computed_property() > 10;}} });\r\n// Returns all models where the computed_property method returns a value greater than 10.\r\n```\r\n\r\nFor callbacks that use `this` rather than the model attribute, the key name supplied is arbitrary and has no\r\neffect on the results. If the only test you were performing was like the above test it would make more sense\r\nto simply use `MyCollection.filter`. However if you are performing other tests or are using the paging / sorting /\r\ncaching options of backbone query, then this functionality is useful.\r\n\r\nCombined Queries\r\n================\r\n\r\nMultiple queries can be combined together. By default all supplied queries must be matched `$and`. However it is possible\r\nto specify either `$or`, `$nor`, `$not` to implement alternate logic.\r\n\r\n### $and\r\n\r\n```js\r\nMyCollection.query({ $and: { title: {$like: \"News\"}, likes: {$gt: 10}}});\r\n// Returns all models that contain \"News\" in the title and have more than 10 likes.\r\nMyCollection.query({ title: {$like: \"News\"}, likes: {$gt: 10} });\r\n// Same as above as $and is assumed if not supplied\r\n```\r\n\r\n### $or\r\n\r\n```js\r\nMyCollection.query({ $or: { title: {$like: \"News\"}, likes: {$gt: 10}}});\r\n// Returns all models that contain \"News\" in the title OR have more than 10 likes.\r\n```\r\n\r\n### $nor\r\nThe opposite of `$or`\r\n\r\n```js\r\nMyCollection.query({ $nor: { title: {$like: \"News\"}, likes: {$gt: 10}}});\r\n// Returns all models that don't contain \"News\" in the title NOR have more than 10 likes.\r\n```\r\n\r\n### $not\r\nThe opposite of `$and`\r\n\r\n```js\r\nMyCollection.query({ $not: { title: {$like: \"News\"}, likes: {$gt: 10}}});\r\n// Returns all models that don't contain \"News\" in the title AND DON'T have more than 10 likes.\r\n```\r\n\r\nCompound Queries\r\n================\r\n\r\nIt is possible to use multiple combined queries, for example searching for models that have a specific title attribute,\r\nand either a category of \"abc\" or a tag of \"xyz\"\r\n\r\n```js\r\nMyCollection.query({\r\n    $and: { title: {$like: \"News\"}},\r\n    $or: {likes: {$gt: 10}, color:{$contains:\"red\"}}\r\n});\r\n//Returns models that have \"News\" in their title and\r\n//either have more than 10 likes or contain the color red.\r\n```\r\n\r\nSorting\r\n=======\r\nOptional `sortBy` and `order` attributes can be supplied as part of an options object.\r\n`sortBy` can either be a model key or a callback function which will be called with each model in the array.\r\n\r\n```js\r\nMyCollection.query({title: {$like: \"News\"}}, {sortBy: \"likes\"});\r\n// Returns all models that contain \"News\" in the title,\r\n// sorted according to their \"likes\" attribute (ascending)\r\n\r\nMyCollection.query({title: {$like: \"News\"}}, {sortBy: \"likes\", order:\"desc\"});\r\n// Same as above, but \"descending\"\r\nMyCollection.query(\r\n    {title: {$like: \"News\"}},\r\n    {sortBy: function(model){ return model.get(\"title\").charAt(1);}}\r\n);\r\n// Results sorted according to 2nd character of the title attribute\r\n```\r\n\r\n\r\nPaging\r\n======\r\nTo return only a subset of the results paging properties can be supplied as part of an options object.\r\nA `limit` property must be supplied and optionally a `offset` or a `page` property can be supplied.\r\n\r\n```js\r\nMyCollection.query({likes:{$gt:10}}, {limit:10});\r\n// Returns the first 10 models that have more than 10 likes\r\n\r\nMyCollection.query({likes:{$gt:10}}, {limit:10, offset:5});\r\n// Returns 10 models that have more than 10 likes starting\r\n//at the 6th model in the results\r\n\r\nMyCollection.query({likes:{$gt:10}}, {limit:10, page:2});\r\n// Returns 10 models that have more than 10 likes starting\r\n//at the 11th model in the results (page 2)\r\n```\r\n\r\nWhen using the paging functionality, you will normally need to know the number of pages so that you can render\r\nthe correct interface for the user. Backbone Query can send the number of pages of results to a supplied callback.\r\nThe callback should be passed as a `pager` property on the options object. This callback will also receive the sliced\r\nmodels as a second variable.\r\n\r\nHere is a coffeescript example of a simple paging setup using the pager callback option:\r\n\r\n```coffeescript\r\nclass MyView extends Backbone.View\r\n    initialize: ->\r\n        @template = -> #templating setup here\r\n\r\n    events:\r\n        \"click .page\": \"change_page\"\r\n\r\n    query_collection: (page = 1) ->\r\n        #Collection should be passed in when the view is instantiated\r\n        @collection.query {category:\"javascript\"}, {limit:5, page:page, pager:@render_pages}\r\n\r\n    change_page: (e) =>\r\n        page_number = $(e.target).data('page_number')\r\n        @query_collection page_number\r\n\r\n    render_pages: (total_pages, results) =>\r\n        content = @template results\r\n        pages = [1..total_pages]\r\n        nav = \"\"\"\r\n        <nav>\r\n            <span>Total Pages: #{total_pages}</span>\r\n        \"\"\"\r\n        for page in pages\r\n          nav += \"<a href='#' data-page_number='#{page}'>#{page}</a>\"\r\n\r\n        nav += \"</nav>\"\r\n\r\n        @$el.html content + nav\r\n\r\n    render: => @query_collection()\r\n\r\n```\r\n\r\n\r\nCaching Results\r\n================\r\nTo enable caching set the cache flag to true in the options object. This can greatly improve performance when paging\r\nthrough results as the unpaged results will be saved. This options is not enabled by default as if models are changed,\r\nadded to, or removed from the collection, then the query cache will be out of date. If you know\r\nthat your data is static and won't change then caching can be enabled without any problems.\r\nIf your data is dynamic (as in most Backbone Apps) then a helper cache reset method is provided:\r\n`reset_query_cache`. This method should be bound to your collections change, add and remove events\r\n(depending on how your data can be changed).\r\n\r\nCache will be saved in a `_query_cache` property on each collection where a cache query is performed.\r\n\r\n```js\r\nMyCollection.query({likes:{$gt:10}}, {limit:10, page:1, cache:true});\r\n//The first query will operate as normal and return the first page of results\r\nMyCollection.query({likes:{$gt:10}}, {limit:10, page:2, cache:true});\r\n//The second query has an identical query object to the first query, so therefore the results will be retrieved\r\n//from the cache, before the paging paramaters are applied.\r\n\r\n// Binding the reset_query_cache method\r\nvar MyCollection = Backbone.QueryCollection.extend({\r\n    initialize: function(){\r\n        this.bind(\"change\", this.reset_query_cache, this);\r\n    }\r\n});\r\n\r\n\r\n```\r\n\r\n\r\nAuthor\r\n======\r\n\r\nDave Tonge - [davidgtonge](http://github.com/davidgtonge)\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/davidgtonge/backbone_query/issues"
  },
  "_id": "backbone-query@0.1.2",
  "dist": {
    "shasum": "4c095a089d4292088fa58a73b64821261add927d"
  },
  "_from": "backbone-query@",
  "_resolved": "https://registry.npmjs.org/backbone-query/-/backbone-query-0.1.2.tgz"
}
